/**
 * License.....: MIT
 */

__constant unsigned char SBox[256] = {
    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
    0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
    0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
    0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
    0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
    0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
    0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
    0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
    0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
    0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
    0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
    0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
    0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
    0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
    0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48
};

inline unsigned int GET_ULONG_BE(__global unsigned int *b, int i) {
    return ((unsigned int)b[i] << 24) | ((unsigned int)b[i + 1] << 16) | ((unsigned int)b[i + 2] << 8) | (unsigned int)b[i + 3];
}

inline void PUT_ULONG_BE(unsigned int n, __global unsigned int *b, int i) {
    b[i] = (unsigned char)(n >> 24);
    b[i + 1] = (unsigned char)(n >> 16);
    b[i + 2] = (unsigned char)(n >> 8);
    b[i + 3] = (unsigned char)n;
}

inline unsigned int SHL(unsigned int x, unsigned int n) {
    return (x << n) & 0xFFFFFFFF;
}

inline unsigned int ROTL(unsigned int x, unsigned int n) {
    return SHL(x, n) | (x >> (32 - n));
}

inline unsigned char sm4Sbox(unsigned char inch) {
    return SBox[inch];
}

inline unsigned int sm4Lt(unsigned int ka) {
    unsigned int bb = 0;
    unsigned int c = 0;
    unsigned char a[4];
    unsigned char b[4];
    a[0] = (unsigned char)(ka >> 24);
    a[1] = (unsigned char)(ka >> 16);
    a[2] = (unsigned char)(ka >> 8);
    a[3] = (unsigned char)ka;
    b[0] = sm4Sbox(a[0]);
    b[1] = sm4Sbox(a[1]);
    b[2] = sm4Sbox(a[2]);
    b[3] = sm4Sbox(a[3]);
    bb = ((unsigned int)b[0] << 24) | ((unsigned int)b[1] << 16) | ((unsigned int)b[2] << 8) | (unsigned int)b[3];
    c = bb ^ (ROTL(bb, 2)) ^ (ROTL(bb, 10)) ^ (ROTL(bb, 18)) ^ (ROTL(bb, 24));
    return c;
}

inline unsigned int sm4F(unsigned int x0, unsigned int x1, unsigned int x2, unsigned int x3, unsigned int rk) {
    return (x0 ^ sm4Lt(x1 ^ x2 ^ x3 ^ rk));
}

__kernel void compute(__global unsigned int *sk, __global unsigned int *input, __global unsigned int *output) {
    unsigned int idx = get_global_id(0); // 获取当前工作项的全局唯一标识符

    __local unsigned int local_sk[32]; // 本地内存中的轮密钥
    unsigned int local_ulbuf[36]; // 只有轮密钥才共享

    // 将轮密钥从全局内存加载到本地内存
    if (get_local_id(0) == 0) {
        for (int i = 0; i < 32; i++) {
            local_sk[i] = sk[i];
        }
    }

    // 等待所有工作项加载轮密钥完成
    barrier(CLK_LOCAL_MEM_FENCE);

    // 将输入数据加载到本地内存
    local_ulbuf[0] = input[idx * 4];
    local_ulbuf[1] = input[idx * 4 + 1];
    local_ulbuf[2] = input[idx * 4 + 2];
    local_ulbuf[3] = input[idx * 4 + 3];

    // 计算轮函数
    for (unsigned int i = 0; i < 32; i++) {
        local_ulbuf[i + 4] = sm4F(local_ulbuf[i], local_ulbuf[i + 1], local_ulbuf[i + 2], local_ulbuf[i + 3], local_sk[i]);
    }

    // 将结果写入全局内存
    output[idx * 4] = local_ulbuf[35];
    output[idx * 4 + 1] = local_ulbuf[34];
    output[idx * 4 + 2] = local_ulbuf[33];
    output[idx * 4 + 3] = local_ulbuf[32];
}
